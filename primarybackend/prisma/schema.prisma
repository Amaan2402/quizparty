// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuizStatus {
  CREATED
  ONGOING
  COMPLETED
}

enum RewardBrands {
  amazon
  flipkart
  swiggy
  myntra
  ajio
  zomato
}

model User {
  id              String @id     @default(uuid())
  name            String
  email           String @unique 
  password        String
  mailVerified    Boolean @default(false)


  quizCreated       Quiz[]
  quizParticipated  Participant[]
  questionsCreated  Question[]
} 

model Participant {
  id        String @id @default(uuid())
  userId    String
  quizId    String
  joinedAt DateTime @default(now())
  isConnected Boolean @default(false)
  

  answers Answer[]
  result ParticipantResult?
  quiz Quiz @relation(fields: [quizId], references: [id])
  user User @relation(fields: [userId], references: [id])
  @@unique([userId, quizId]) // Ensure a user can only participate in a quiz once
}

model Reward {
  id              String @id @default(uuid())
  quizId          String @unique
  brand           RewardBrands
  voucherCode            String

  quiz Quiz @relation(fields: [quizId], references: [id])
}

model Quiz {
  id                    String @id @default(uuid())
  creatorId             String
  title                 String 
  description           String?
  reward                Reward?
  currentQuestionIndex  Int
  timePerQuestion       Int
  createdAt             DateTime @default(now())  
  status                QuizStatus @default(CREATED)
  maxParticipants       Int @default(0)

  participants          Participant[]
  questions             Question[]
  participantResults    ParticipantResult[]
  creator User @relation(fields: [creatorId], references: [id])
  QuizResultQueue QuizResultQueue[]
}



model Question {
  id              String   @id @default(uuid())
  questionText    String
  questionIndex   Int
  options         Json
  quizId          String  
  correctOption   Int
  creatorId       String

  answers         Answer[]
  quiz Quiz @relation(fields: [quizId], references: [id])
  creator User @relation(fields: [creatorId], references: [id])
  @@unique([quizId, questionIndex]) // Ensure a question index is unique within a quiz
  @@unique([quizId, questionText]) // Ensure a question text is unique within a quiz
}

model Answer {
  id              String    @id @default(uuid())
  participantId   String
  questionId      String
  selectedOption  Int
  isAnswerCorrect Boolean?
  createdAt       DateTime  @default(now())

  answerOutbox    AnswerOutbox?
  question Question @relation(fields: [questionId], references: [id])
  participant Participant @relation(fields: [participantId], references: [id])
  @@unique([participantId, questionId]) // Ensure a participant can only answer a question once
} 

model ParticipantResult {
  id              String   @id @default(uuid())
  participantId   String   @unique
  quizId          String
  score           Int 
  rank            Int
  createdAt       DateTime @default(now())

  quiz Quiz @relation(fields: [quizId], references: [id])
  participant Participant @relation(fields: [participantId], references: [id])
  @@unique([participantId, quizId]) // Ensure a participant can only have one result per quiz
}

model QuizResultQueue {
  id             String   @id @default(uuid())
  quizId         String   

  quiz         Quiz @relation(fields: [quizId], references: [id])
  quizResult   QuizResultQueueOutbox?
} 

model AnswerOutbox {
  id            String   @id @default(uuid())
  answerId      String @unique
  answer Answer @relation(fields: [answerId], references: [id])
}

model QuizResultQueueOutbox {
  id           String   @id @default(uuid())
  quizResultQueueId  String @unique
  quizResultQueue QuizResultQueue @relation(fields: [quizResultQueueId], references: [id])
}