
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AnswerScalarFieldEnum = {
  id: 'id',
  participantId: 'participantId',
  questionId: 'questionId',
  isAnswerCorrect: 'isAnswerCorrect',
  createdAt: 'createdAt',
  selectedOption: 'selectedOption'
};

exports.Prisma.AnswerOutboxScalarFieldEnum = {
  id: 'id',
  answerId: 'answerId'
};

exports.Prisma.ParticipantScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  quizId: 'quizId',
  joinedAt: 'joinedAt',
  isConnected: 'isConnected',
  isBanned: 'isBanned'
};

exports.Prisma.ParticipantResultScalarFieldEnum = {
  id: 'id',
  participantId: 'participantId',
  quizId: 'quizId',
  score: 'score',
  rank: 'rank',
  createdAt: 'createdAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  questionText: 'questionText',
  questionIndex: 'questionIndex',
  options: 'options',
  quizId: 'quizId',
  creatorId: 'creatorId',
  correctOption: 'correctOption',
  CorrectAnswerPercentage: 'CorrectAnswerPercentage'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  title: 'title',
  description: 'description',
  status: 'status',
  currentQuestionIndex: 'currentQuestionIndex',
  timePerQuestion: 'timePerQuestion',
  createdAt: 'createdAt',
  maxParticipants: 'maxParticipants',
  totalParticipants: 'totalParticipants',
  isResultCalculated: 'isResultCalculated',
  avgScore: 'avgScore',
  lowestScore: 'lowestScore',
  resultSentViaMail: 'resultSentViaMail',
  startedAt: 'startedAt',
  endedAt: 'endedAt'
};

exports.Prisma.QuizResultQueueScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId'
};

exports.Prisma.QuizResultQueueOutboxScalarFieldEnum = {
  id: 'id',
  quizResultQueueId: 'quizResultQueueId'
};

exports.Prisma.RewardScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  brand: 'brand',
  voucherCode: 'voucherCode'
};

exports.Prisma.ScoreDistributionScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  count: 'count',
  label: 'label'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  mailVerified: 'mailVerified'
};

exports.Prisma.UserDiscordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  discordId: 'discordId',
  discordUsername: 'discordUsername',
  discordDiscriminator: 'discordDiscriminator',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  connectedAt: 'connectedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.QuizStatus = exports.$Enums.QuizStatus = {
  CREATED: 'CREATED',
  LIVE: 'LIVE',
  STARTED: 'STARTED',
  ENDED: 'ENDED'
};

exports.RewardBrands = exports.$Enums.RewardBrands = {
  amazon: 'amazon',
  flipkart: 'flipkart',
  myntra: 'myntra',
  ajio: 'ajio',
  swiggy: 'swiggy',
  zomato: 'zomato'
};

exports.Prisma.ModelName = {
  Answer: 'Answer',
  AnswerOutbox: 'AnswerOutbox',
  Participant: 'Participant',
  ParticipantResult: 'ParticipantResult',
  Question: 'Question',
  Quiz: 'Quiz',
  QuizResultQueue: 'QuizResultQueue',
  QuizResultQueueOutbox: 'QuizResultQueueOutbox',
  Reward: 'Reward',
  ScoreDistribution: 'ScoreDistribution',
  User: 'User',
  UserDiscord: 'UserDiscord'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
